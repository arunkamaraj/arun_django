from django.db import models
from django.db.models import *
from django.contrib.auth.models import User
from tagging.fields import TagField
from markdown import markdown
from django.conf import settings
from django.utils.encoding import smart_str
import datetime

class Category(models.Model):
	title = models.CharField(max_length=100,help_text='you can create max 100 char')
	slug =models.SlugField(unique=True,help_text="This is unique it is generated by automatically")
	description=models.TextField()
	
	class Meta():

		verbose_name_plural="categories" #to define plural django used to have plural vlaue in admin
#		ordering =['title'] #i hope it already get ordered 

	def __unicode__(self):
		return self.title
	
	def get_absolute_url(self):
		return '/categories/%s/' %(self.slug)
class LiveEntryManager(models.Manager):
	def get_query_set(self):
		return super(LiveEntryManager,self).get_query_set().filter(status=self.model.LIVE_STATUS)


class Entry(models.Model):
#	objects=models.Manager()
        live=LiveEntryManager()
	title=models.CharField(max_length=50)
	slug =models.SlugField(unique_for_date='pub_date',help_text="this is automatically generated from tilte")
	excerpt=models.TextField(blank=True)
	body=models.TextField(max_length=500)
#       we no need to call as function at any time 
	pub_date=models.DateTimeField(default=datetime.datetime.now)
#	creating foreign key for user table
	author=models.ForeignKey(User)
#	example of many to many : it is especially to access the another model 
	categories=models.ManyToManyField(Category)
#	adding tags
	tags=TagField(help_text='seperate tag wih space')
#	to store the HTML values pageno 78 and another important is if the editable field is True it ll be displayed in Admin page 
	excerpt_html=models.TextField(editable=False,blank=True)	
	body_html=models.TextField(editable=False,blank=True)
	
#	Boolean filed to enable the check box
	enable_comments=models.BooleanField(default=True)
        featured=models.BooleanField(default=False)	
	LIVE_STATUS=1
	DRAFT_STATUS=2
	HIDDEN_STATUS=3
#	it should give tuple of tuple or list of list 
	STATUS_CHOICE=((LIVE_STATUS,'Live'),(DRAFT_STATUS,'Draft'),(HIDDEN_STATUS,'Hidden'))
	status=models.IntegerField(choices=STATUS_CHOICE,default=LIVE_STATUS)
        
	class Meta():
		verbose_name_plural='Entries'
		ordering=['-pub_date']
	
	def __unicode__(self):
#		unicode change only for CharField
		return self.title
# 	overriding the save method 
	def save(self,force_insert=False ,force_update=False):
		self.body_html=markdown(self.body)
		if self.excerpt:
			self.excerpt_html=markdown(self.excerpt)
		super(Entry,self).save(force_insert=False,force_update=False)
	
#	getting the url
	@models.permalink 
	def get_absolute_url(self):
#		The importent thing is here we are using %b to indicate the month is in the form of Jan,Feb,Mar,Apr
#		return '/weblog/%s/%s/'%(self.pub_date.strftime("%Y/%b/%d").lower(),self.slug)
		return ('entry_detail',(),{'year':self.pub_date.strftime('%Y'),'month':self.pub_date.strftime('%b').lower(),'days':self.pub_date.strftime('%d'),'slug':self.slug})
#		very important and confusing thing is here how it getting the proper url formate we are passing the required filed but still we have same trouble that is it is same kind of url name... to be more clear refer the url.py of arun_dj 		
#	it is very iomport becasuse i have spend nearly one day for fixing the issue  here i have metioned as day but in the url i have metioned as days


# this is another way to use decorater  
#	get_absolute_url=models.permalink(get_absolute_url)


class Link(models.Model):
	title=models.CharField(max_length=50)
	slug=models.SlugField(unique_for_date='pub_date',help_text="this is automatically generated from tilte")
	description=models.TextField(blank=True)
	description_html=models.TextField(blank=True,editable=False)
	url=models.URLField(unique=True)
	pub_date=models.DateTimeField(default=datetime.datetime.now)
	posted_by=models.ForeignKey(User)
	tag=TagField()
	enable_comments=models.BooleanField(default=True)
	post_elsewhere=models.BooleanField('Post to Delicoius',default=True)
	via_name=models.CharField('via',max_length=100,blank=True,help_text='it is ised to show the name of the prson whose site you spotted the link on .Optional')
	via_url=models.URLField('via URL',help_text='url of site  where u spotted the link.optional')
	
	class Meta():
		ordering=['-pub_date']

	def __unicode__(self):
		return self.title

	@models.permalink
	def get_absolute_url(self):
		return ('link_detail','',{'year':self.pub_date.strftime('%Y'),'month':self.pub_date.strftime('%b').lower(),'days':self.pub_date.strftime('%d'),'slug':self.slug})

	def save(self,force_insert=False,force_update=False):
                if not self.id and self.post_elsewhere:
                        import pydelicious
			from pydelicious import DeliciousAPI
			from getpass import getpass
#			a = DeliciousAPI('arunaiarun1409@gmail.com', getpass('Fastrack!23'))
#			a.posts_add(smart_str(self.url),smart_str(self.title),smart_str(self.tag))
                        pydelicious.add(settings.DELICIOUS_USER,settings.DELICIOUS_PASSWORD,smart_str(self.url),smart_str(self.title),smart_str(self.tag))
#			pydelicious.add('arunaiarun1409@gmail.com','Fastrack!23',smart_str(self.url),smart_str(self.title),smart_str(self.tag))	
                if self.description :
                        self.description_html=markdown(self.description)
                super(Link,self).save(force_insert=False,force_update=False)
